name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v1'

jobs:
  # Job 1: Code Quality and Testing
  test:
    name: 🧪 Test & Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🏗️ Install dependencies
        run: npm ci
        
      - name: 🔍 ESLint
        run: npm run lint
        
      - name: 🧪 Run tests
        run: npm run test:run
        env:
          VITE_SUPABASE_URL: 'http://127.0.0.1:54321'
          VITE_SUPABASE_ANON_KEY: 'test-anon-key'
          
      - name: 📊 Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false
        continue-on-error: true

  # Job 2: Build Application
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🏗️ Install dependencies
        run: npm ci
        
      - name: 🔨 Build application
        run: npm run build
        env:
          VITE_SUPABASE_URL: 'http://127.0.0.1:54321'
          VITE_SUPABASE_ANON_KEY: 'test-anon-key'
          
      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  # Job 3: Security Audit (fully non-blocking)
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🏗️ Install dependencies
        run: npm ci
        
      - name: 🔍 Security audit (informational only)
        run: |
          echo "Running security audit..."
          npm audit --audit-level=critical || true
          echo "Security audit completed."
        continue-on-error: true
        
      - name: 🛡️ Snyk security scan (optional)
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Job 4: Database Backup (Production only)
  backup:
    name: 💾 Database Backup
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    continue-on-error: true
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🏗️ Install dependencies
        run: npm ci
        
      - name: 💾 Run Supabase backup
        run: node scripts/supabase-backup.js
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        continue-on-error: true
          
      - name: 📦 Upload backup artifacts
        uses: actions/upload-artifact@v4
        with:
          name: database-backup-${{ github.sha }}
          path: backups/
          retention-days: 30
        continue-on-error: true

  # Job 5: Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    continue-on-error: true
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/
          
      - name: 🚀 Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prebuilt'
          scope: ${{ secrets.VERCEL_ORG_ID }}
          alias-domains: |
            taskmind-staging.vercel.app
        continue-on-error: true

  # Job 6: Deploy to Production
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, backup]
    if: github.ref == 'refs/heads/main'
    environment: production
    continue-on-error: true
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/
          
      - name: 🚀 Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prebuilt --prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}
        continue-on-error: true
          
      - name: 📢 Notify Slack of deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            🚀 Production deployment ${{ job.status }}!
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true

  # Job 7: Performance Testing (Production deployments) - Optional
  performance:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    continue-on-error: true
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: ⚡ Run basic performance check
        run: |
          echo "Performance testing placeholder - Lighthouse CI would run here"
          echo "Skipping for now due to missing configuration"
        continue-on-error: true

  # Job 8: Cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [build]
    continue-on-error: true
    
    steps:
      - name: 🧹 Clean up old artifacts
        run: echo "Cleanup completed - artifacts will expire based on retention settings"
        continue-on-error: true 